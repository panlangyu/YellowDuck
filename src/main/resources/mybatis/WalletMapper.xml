<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.duck.yellowduck.domain.dao.WalletMapper">

    <!-- ������������������������������������ -->
    <resultMap id="BaseResultMap" type="com.duck.yellowduck.domain.model.vo.WalletVo">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="coinName" jdbcType="VARCHAR" property="coinName"/>
        <result column="coinImg" jdbcType="VARCHAR" property="coinImg"/>
        <result column="address" jdbcType="VARCHAR" property="address"/>
        <result column="contractAddr" jdbcType="VARCHAR" property="contractAddr"/>
        <result column="userId" jdbcType="INTEGER" property="userId"/>
    </resultMap>

    <!-- ������������������������������������ -->
    <resultMap id="BaseResultMapWallet" type="com.duck.yellowduck.domain.model.model.Wallet">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="coinName" jdbcType="VARCHAR" property="coinName"/>
        <result column="address" jdbcType="VARCHAR" property="address"/>
        <result column="contractAddr" jdbcType="VARCHAR" property="contractAddr"/>
        <result column="privateKey" jdbcType="VARCHAR" property="privateKey"/>
        <result column="passwd" jdbcType="VARCHAR" property="passwd"/>
        <result column="keystore" jdbcType="VARCHAR" property="keystore"/>
        <result column="createTime" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="userId" jdbcType="INTEGER" property="userId"/>
    </resultMap>


    <!-- ��������������������������? -->
    <select id="selectUserWalletTotal" resultType="BigDecimal" >
        SELECT SUM(amount) FROM duck_wallet

        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="userId != null and userId != 0">
                AND userid = #{userId}
            </if>
        </trim>

    </select>


    <!-- ������������������������������ -->
    <select id="selectUserWalletCoinList" resultMap="BaseResultMap">
        /*SELECT w.id,coinId,coinName,coinImg,w.address,w.userId,freeAmount,availableAmount FROM duck_wallet w
        INNER JOIN DUCK_COIN c ON w.`coinId`=c.`id`*/

        SELECT id,coinName,coinImg,address,contractAddr,userId FROM duck_wallet

        <trim prefix="WHERE" prefixOverrides="AND | OR">

            <if test="userId != null and userId != 0">
                AND userid = #{userId}
            </if>
            <if test="coinName != null and coinName.length() > 0">
                AND coinName = #{coinName}
            </if>

        </trim>

    </select>


    <!-- ������������������������������,��������? -->
    <select id="lockWalletTable" resultType="com.duck.yellowduck.domain.model.model.Wallet">

        /*SELECT * FROM duck_wallet FOR UPDATE*/

        SELECT * FROM duck_wallet LOCK IN SHARE MODE;

    </select>

    <!-- ������������������������������,��������������? -->
    <select id="selectUserWalletCoinById" resultMap="BaseResultMapWallet" parameterType="com.duck.yellowduck.domain.model.model.Wallet">

        SELECT
        <include refid="Base_Column_List"/>
        FROM duck_wallet

        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="id != null and id != 0">
                AND id = #{id}
            </if>

        </trim>

    </select>

    <!-- ������������������������������,��������?������ -->
    <select id="selectUserWalletCoinByAddress" resultMap="BaseResultMapWallet" parameterType="com.duck.yellowduck.domain.model.model.Wallet">

        SELECT
        <include refid="Base_Column_List"/>
        FROM duck_wallet

        <trim prefix="WHERE" prefixOverrides="AND | OR">
            <if test="address != null and address.length() > 0">
                AND address = #{address}
            </if>

        </trim>

    </select>



    <!-- ������������������ ������ -->
    <update id="modifyWalletTurnOut" parameterType="com.duck.yellowduck.domain.model.model.Wallet">

        UPDATE duck_wallet

        <trim prefix="SET" suffixOverrides="," suffix="WHERE id=#{id}">

            <if test="amount != null and amount != 0">
                amount = amount - #{amount},
                availableAmount = availableAmount - #{amount},
            </if>
            updateTime=NOW(),
        </trim>

    </update>

    <!-- ������������������ ������ -->
    <update id="modifyWalletToChangeInto" parameterType="com.duck.yellowduck.domain.model.model.Wallet">

        UPDATE duck_wallet

        <trim prefix="SET" suffixOverrides="," suffix="WHERE id=#{id}">

            <if test="amount != null and amount != 0">
                amount = amount + #{amount},
                availableAmount = availableAmount + #{amount},
            </if>

            updateTime=NOW(),
        </trim>

        <!-- <if test="coinId != null and coinId != 0">
           AND coinId = #{coinId}
         </if>-->

    </update>


    <!-- ��������������������������������������? -->
    <select id="selectUserWalletByCoinId" resultType="com.duck.yellowduck.domain.model.model.Wallet">

        SELECT

        <include refid="Base_Column_List"/>

        FROM duck_wallet

        <trim prefix="WHERE" prefixOverrides="AND | OR">

            <if test="userId != null and userId != 0">
                AND userId = #{userId}
            </if>

            <if test="coinName != null and coinName.length() > 0">
                AND coinName = #{coinName}
            </if>

        </trim>

    </select>


    <!-- ������������������ ��? ������������ (������������)+(������������) -->
    <select id="selectYesterdayProfit" resultType="Map">
        SELECT
        SUM(amount) AS yesterdayProfit,
        (
        SELECT freeAmount FROM duck_wallet

        <trim prefix="WHERE" prefixOverrides="AND | OR">

            <if test="userId != null and userId != 0">
                AND userId = #{userId}
            </if>

            <if test="coinId != null and coinId != 0">
                AND coinId = #{coinId}
            </if>

        </trim>

        ) AS freeAmount
        FROM DUCK_TRANSCATION
        WHERE TO_DAYS( NOW( ) ) - TO_DAYS(createTime) = 1

        <if test="userId != null and userId != 0">
            AND userId = #{userId}
        </if>

        <if test="coinId != null and coinId != 0">
            AND coinId = #{coinId}
        </if>
        <!--<if test="coinType != null and coinType.length() > 0">
            AND coinType = #{coinType}
        </if>-->

    </select>

    <!-- ������������������(��? ������ ��������? ������������ ��������������������?) -->
    <update id="modifyWalletDepositToChangeInto" parameterType="com.duck.yellowduck.domain.model.model.Wallet">

        UPDATE duck_wallet

        <trim prefix="SET" suffixOverrides="," suffix="WHERE id=#{id}">

            <if test="amount != null and amount != 0">
                freeAmount = freeAmount + #{amount},
                availableAmount = availableAmount - #{amount},
            </if>
            updateTime=NOW(),
        </trim>

    </update>

    <!-- ������������������(��? ������������ ��������? ������ ��������������������?) -->
    <update id="modifyWalletDepositTurnOut" parameterType="com.duck.yellowduck.domain.model.model.Wallet">

        UPDATE duck_wallet

        <trim prefix="SET" suffixOverrides="," suffix="WHERE id=#{id}">

            <if test="amount != null and amount != 0">
                freeAmount = freeAmount - #{amount},
                availableAmount = availableAmount + #{amount},
            </if>
            updateTime=NOW(),
        </trim>

    </update>


    <!-- ������������������������ -->
    <insert id="insertUserWalletInfo" parameterType="java.util.List">

        <!--<selectKey resultType ="java.lang.Integer" keyProperty= "id" order= "AFTER">

             SELECT LAST_INSERT_ID()

         </selectKey>-->

        INSERT INTO duck_wallet(
        coinId,
        address,
        privateKey,
        passwd,
        createTime,
        updateTime,
        keystore,
        userId,
        freeAmount,
        amount,
        availableAmount
        )
        VALUES
        <foreach collection="list"  item="item" separator=",">
            (
            #{item.coinId},
            #{item.address},
            #{item.privateKey},
            #{item.passwd},
            now(),
            now(),
            #{item.keystore},
            #{item.userId},
            DEFAULT ,
            DEFAULT ,
            DEFAULT
            )
        </foreach>

    </insert>


    <!-- ������������������,������������������ 0 ��?  ��������������������������������?,  ������3��������������������������������? -->
    <select id="selectUserWalletInterest" resultType="com.duck.yellowduck.domain.model.model.Wallet">
        SELECT w.id,coinId,coinName,w.address,w.createTime,w.updateTime,userId,freeAmount,amount,availableAmount FROM duck_wallet w
        INNER JOIN DUCK_COIN c ON w.`coinId`=c.`id`
        WHERE freeAmount != 0
        AND TO_DAYS( NOW() ) - TO_DAYS(w.updateTime) &lt;= 3
    </select>


    <!-- ������������������������ ������������ -->
    <update id="modifyUserWalletInterest" parameterType="com.duck.yellowduck.domain.model.model.Wallet">
        UPDATE duck_wallet

        <trim prefix="SET" suffixOverrides="," suffix="WHERE id=#{id}">

            <if test="amount != null and amount != 0">
                freeAmount = freeAmount + #{amount},
                amount = amount + #{amount},
                interest = interest + #{amount},
            </if>
            updateTime = NOW(),
        </trim>

    </update>

    <!-- ������������������ -->
    <insert id="insertWalletInfo" parameterType="com.duck.yellowduck.domain.model.model.Wallet">

        INSERT INTO duck_wallet(
                coinName,
                coinImg,
                address,
                contractAddr,
                privateKey,
                passwd,
                createTime,
                updateTime,
                keystore,
                userId
                )
        VALUES(
            #{coinName},
            #{coinImg},
            #{address},
            #{contractAddr},
            #{privateKey},
            #{passwd},
            NOW(),
            NOW(),
            #{keystore},
            #{userId}
        )

    </insert>


    <!-- ������������������ETH������������ -->
    <select id="findWalletAddressByUserId" resultType="java.lang.String">

        SELECT address FROM duck_wallet

        <trim prefix="WHERE" prefixOverrides="AND | OR">

            <if test="userId != null and userId != 0">
                AND userId = #{userId}
            </if>

            <if test="coinName != null and coinName.length() > 0">
                AND coinName = #{coinName}
            </if>

        </trim>

    </select>

    <!-- ������������������ETH������������ -->
    <select id="findWalletByUserIdAndAddress" resultMap="BaseResultMapWallet">

        SELECT

        <include refid="Base_Column_List"/>

        FROM duck_wallet

        <trim prefix="WHERE" prefixOverrides="AND | OR">

            <if test="userId != null and userId != 0">
                AND userId = #{userId}
            </if>

            <if test="contractAddr != null and contractAddr.length() > 0">
                AND contractAddr = #{contractAddr}
            </if>

        </trim>

    </select>


    <!-- ��������������������?��������������? -->
    <select id="findUserWalletInfo" resultMap="BaseResultMapWallet" parameterType="java.lang.Integer">
        SELECT

        <include refid="Base_Column_List"/>

        FROM duck_wallet

        <trim prefix="WHERE" prefixOverrides="AND | OR">

            <if test="userId != null and userId != 0">
                AND userId = #{userId}
            </if>

        </trim>

        ORDER BY createTime

    </select>



    <!-- 请求参数 -->
    <sql id="Base_Column_List">
        id,
        coinName,
        address,
        contractAddr,
        privateKey,
        passwd,
        keystore,
        createTime,
        userId
    </sql>


</mapper>